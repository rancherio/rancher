// Code generated by MockGen. DO NOT EDIT.
// Source: tokens.go
//
// Generated by this command:
//
//	mockgen -source tokens.go -destination=zz_token_fakes.go -package=tokens
//

// Package tokens is a generated GoMock package.
package tokens

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MocktimeHandler is a mock of timeHandler interface.
type MocktimeHandler struct {
	ctrl     *gomock.Controller
	recorder *MocktimeHandlerMockRecorder
}

// MocktimeHandlerMockRecorder is the mock recorder for MocktimeHandler.
type MocktimeHandlerMockRecorder struct {
	mock *MocktimeHandler
}

// NewMocktimeHandler creates a new mock instance.
func NewMocktimeHandler(ctrl *gomock.Controller) *MocktimeHandler {
	mock := &MocktimeHandler{ctrl: ctrl}
	mock.recorder = &MocktimeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeHandler) EXPECT() *MocktimeHandlerMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MocktimeHandler) Now() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(string)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MocktimeHandlerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MocktimeHandler)(nil).Now))
}

// MockhashHandler is a mock of hashHandler interface.
type MockhashHandler struct {
	ctrl     *gomock.Controller
	recorder *MockhashHandlerMockRecorder
}

// MockhashHandlerMockRecorder is the mock recorder for MockhashHandler.
type MockhashHandlerMockRecorder struct {
	mock *MockhashHandler
}

// NewMockhashHandler creates a new mock instance.
func NewMockhashHandler(ctrl *gomock.Controller) *MockhashHandler {
	mock := &MockhashHandler{ctrl: ctrl}
	mock.recorder = &MockhashHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhashHandler) EXPECT() *MockhashHandlerMockRecorder {
	return m.recorder
}

// MakeAndHashSecret mocks base method.
func (m *MockhashHandler) MakeAndHashSecret() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAndHashSecret")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeAndHashSecret indicates an expected call of MakeAndHashSecret.
func (mr *MockhashHandlerMockRecorder) MakeAndHashSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAndHashSecret", reflect.TypeOf((*MockhashHandler)(nil).MakeAndHashSecret))
}

// MockuserHandler is a mock of userHandler interface.
type MockuserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockuserHandlerMockRecorder
}

// MockuserHandlerMockRecorder is the mock recorder for MockuserHandler.
type MockuserHandlerMockRecorder struct {
	mock *MockuserHandler
}

// NewMockuserHandler creates a new mock instance.
func NewMockuserHandler(ctrl *gomock.Controller) *MockuserHandler {
	mock := &MockuserHandler{ctrl: ctrl}
	mock.recorder = &MockuserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserHandler) EXPECT() *MockuserHandlerMockRecorder {
	return m.recorder
}

// UserName mocks base method.
func (m *MockuserHandler) UserName(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserName", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserName indicates an expected call of UserName.
func (mr *MockuserHandlerMockRecorder) UserName(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserName", reflect.TypeOf((*MockuserHandler)(nil).UserName), ctx)
}
